%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.5 (Build 21G72) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 131 142
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 131 142
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
44 132 10 10 rc
43 143 m
55 143 l
55 131 l
43 131 l
h
f
Q
q
55 132 10 10 rc
54 143 m
66 143 l
66 131 l
54 131 l
h
f
Q
q
44 132 10 10 rc
43 143 m
55 143 l
55 131 l
43 131 l
h
f
Q
1 1 1 sc
q
0 132 10 10 rc
-1 143 m
11 143 l
11 131 l
-1 131 l
h
f
Q
q
11 132 10 10 rc
10 143 m
22 143 l
22 131 l
10 131 l
h
f
Q
q
22 132 10 10 rc
21 143 m
33 143 l
33 131 l
21 131 l
h
f
Q
q
33 132 10 10 rc
32 143 m
44 143 l
44 131 l
32 131 l
h
f
32 143 m
44 143 l
44 131 l
32 131 l
h
f
Q
0 0 0 sc
q
44 121 10 10 rc
43 132 m
55 132 l
55 120 l
43 120 l
h
f
Q
q
55 121 10 10 rc
54 132 m
66 132 l
66 120 l
54 120 l
h
f
Q
q
44 121 10 10 rc
43 132 m
55 132 l
55 120 l
43 120 l
h
f
Q
1 1 1 sc
q
0 121 10 10 rc
-1 132 m
11 132 l
11 120 l
-1 120 l
h
f
Q
q
11 121 10 10 rc
10 132 m
22 132 l
22 120 l
10 120 l
h
f
Q
q
22 121 10 10 rc
21 132 m
33 132 l
33 120 l
21 120 l
h
f
Q
q
33 121 10 10 rc
32 132 m
44 132 l
44 120 l
32 120 l
h
f
0 0 0 sc
32 132 m
44 132 l
44 120 l
32 120 l
h
f
Q
0 0 0 sc
q
44 110 10 10 rc
43 121 m
55 121 l
55 109 l
43 109 l
h
f
Q
q
55 110 10 10 rc
54 121 m
66 121 l
66 109 l
54 109 l
h
f
Q
q
44 110 10 10 rc
43 121 m
55 121 l
55 109 l
43 109 l
h
f
Q
1 1 1 sc
q
0 110 10 10 rc
-1 121 m
11 121 l
11 109 l
-1 109 l
h
f
Q
q
11 110 10 10 rc
10 121 m
22 121 l
22 109 l
10 109 l
h
f
Q
0 0 0 sc
q
22 110 10 10 rc
21 121 m
33 121 l
33 109 l
21 109 l
h
f
Q
1 1 1 sc
q
33 110 10 10 rc
32 121 m
44 121 l
44 109 l
32 109 l
h
f
0 0 0 sc
32 121 m
44 121 l
44 109 l
32 109 l
h
f
Q
0 0 0 sc
q
44 77 10 10 rc
43 88 m
55 88 l
55 76 l
43 76 l
h
f
Q
1 1 1 sc
q
55 77 10 10 rc
54 88 m
66 88 l
66 76 l
54 76 l
h
f
Q
0 0 0 sc
q
44 77 10 10 rc
43 88 m
55 88 l
55 76 l
43 76 l
h
f
Q
1 1 1 sc
q
0 77 10 10 rc
-1 88 m
11 88 l
11 76 l
-1 76 l
h
f
Q
0 0 0 sc
q
11 77 10 10 rc
10 88 m
22 88 l
22 76 l
10 76 l
h
f
Q
q
22 77 10 10 rc
21 88 m
33 88 l
33 76 l
21 76 l
h
f
Q
1 1 1 sc
q
33 77 10 10 rc
32 88 m
44 88 l
44 76 l
32 76 l
h
f
0 0 0 sc
32 88 m
44 88 l
44 76 l
32 76 l
h
f
Q
0 0 0 sc
q
44 66 10 10 rc
43 77 m
55 77 l
55 65 l
43 65 l
h
f
Q
1 1 1 sc
q
55 66 10 10 rc
54 77 m
66 77 l
66 65 l
54 65 l
h
f
Q
q
44 66 10 10 rc
43 77 m
55 77 l
55 65 l
43 65 l
h
f
Q
0 0 0 sc
q
0 66 10 10 rc
-1 77 m
11 77 l
11 65 l
-1 65 l
h
f
Q
q
11 66 10 10 rc
10 77 m
22 77 l
22 65 l
10 65 l
h
f
Q
q
22 66 10 10 rc
21 77 m
33 77 l
33 65 l
21 65 l
h
f
Q
1 1 1 sc
q
33 66 10 10 rc
32 77 m
44 77 l
44 65 l
32 65 l
h
f
0 0 0 sc
32 77 m
44 77 l
44 65 l
32 65 l
h
f
Q
0 0 0 sc
q
44 55 10 10 rc
43 66 m
55 66 l
55 54 l
43 54 l
h
f
Q
1 1 1 sc
q
55 55 10 10 rc
54 66 m
66 66 l
66 54 l
54 54 l
h
f
Q
q
44 55 10 10 rc
43 66 m
55 66 l
55 54 l
43 54 l
h
f
Q
0 0 0 sc
q
0 55 10 10 rc
-1 66 m
11 66 l
11 54 l
-1 54 l
h
f
Q
q
11 55 10 10 rc
10 66 m
22 66 l
22 54 l
10 54 l
h
f
Q
q
22 55 10 10 rc
21 66 m
33 66 l
33 54 l
21 54 l
h
f
Q
1 1 1 sc
q
33 55 10 10 rc
32 66 m
44 66 l
44 54 l
32 54 l
h
f
32 66 m
44 66 l
44 54 l
32 54 l
h
f
Q
0 0 0 sc
q
44 44 10 10 rc
43 55 m
55 55 l
55 43 l
43 43 l
h
f
Q
1 1 1 sc
q
55 44 10 10 rc
54 55 m
66 55 l
66 43 l
54 43 l
h
f
Q
q
44 44 10 10 rc
43 55 m
55 55 l
55 43 l
43 43 l
h
f
Q
0 0 0 sc
q
0 44 10 10 rc
-1 55 m
11 55 l
11 43 l
-1 43 l
h
f
Q
1 1 1 sc
q
11 44 10 10 rc
10 55 m
22 55 l
22 43 l
10 43 l
h
f
Q
0 0 0 sc
q
22 44 10 10 rc
21 55 m
33 55 l
33 43 l
21 43 l
h
f
Q
1 1 1 sc
q
33 44 10 10 rc
32 55 m
44 55 l
44 43 l
32 43 l
h
f
32 55 m
44 55 l
44 43 l
32 43 l
h
f
Q
0 0 0 sc
q
44 33 10 10 rc
43 44 m
55 44 l
55 32 l
43 32 l
h
f
Q
1 1 1 sc
q
55 33 10 10 rc
54 44 m
66 44 l
66 32 l
54 32 l
h
f
Q
q
44 33 10 10 rc
43 44 m
55 44 l
55 32 l
43 32 l
h
f
Q
q
0 33 10 10 rc
-1 44 m
11 44 l
11 32 l
-1 32 l
h
f
Q
q
11 33 10 10 rc
10 44 m
22 44 l
22 32 l
10 32 l
h
f
Q
0 0 0 sc
q
22 33 10 10 rc
21 44 m
33 44 l
33 32 l
21 32 l
h
f
Q
1 1 1 sc
q
33 33 10 10 rc
32 44 m
44 44 l
44 32 l
32 32 l
h
f
0 0 0 sc
32 44 m
44 44 l
44 32 l
32 32 l
h
f
Q
0 0 0 sc
q
44 22 10 10 rc
43 33 m
55 33 l
55 21 l
43 21 l
h
f
Q
q
55 22 10 10 rc
54 33 m
66 33 l
66 21 l
54 21 l
h
f
Q
q
44 22 10 10 rc
43 33 m
55 33 l
55 21 l
43 21 l
h
f
Q
1 1 1 sc
q
0 22 10 10 rc
-1 33 m
11 33 l
11 21 l
-1 21 l
h
f
Q
0 0 0 sc
q
11 22 10 10 rc
10 33 m
22 33 l
22 21 l
10 21 l
h
f
Q
0.94509804 0.72549021 0 sc
q
22 22 10 10 rc
21 33 m
33 33 l
33 21 l
21 21 l
h
f
Q
1 1 1 sc
q
33 22 10 10 rc
32 33 m
44 33 l
44 21 l
32 21 l
h
f
0.94509804 0.72549021 0 sc
32 33 m
44 33 l
44 21 l
32 21 l
h
f
Q
0 0 0 sc
q
44 11 10 10 rc
43 22 m
55 22 l
55 10 l
43 10 l
h
f
Q
q
55 11 10 10 rc
54 22 m
66 22 l
66 10 l
54 10 l
h
f
Q
q
44 11 10 10 rc
43 22 m
55 22 l
55 10 l
43 10 l
h
f
Q
1 1 1 sc
q
0 11 10 10 rc
-1 22 m
11 22 l
11 10 l
-1 10 l
h
f
Q
0 0 0 sc
q
11 11 10 10 rc
10 22 m
22 22 l
22 10 l
10 10 l
h
f
Q
0.94509804 0.72549021 0 sc
q
22 11 10 10 rc
21 22 m
33 22 l
33 10 l
21 10 l
h
f
Q
1 1 1 sc
q
33 11 10 10 rc
32 22 m
44 22 l
44 10 l
32 10 l
h
f
0.94509804 0.72549021 0 sc
32 22 m
44 22 l
44 10 l
32 10 l
h
f
Q
0 0 0 sc
q
44 0 10 10 rc
43 11 m
55 11 l
55 -1 l
43 -1 l
h
f
Q
1 1 1 sc
q
55 0 10 10 rc
54 11 m
66 11 l
66 -1 l
54 -1 l
h
f
Q
q
44 0 10 10 rc
43 11 m
55 11 l
55 -1 l
43 -1 l
h
f
Q
q
0 0 10 10 rc
-1 11 m
11 11 l
11 -1 l
-1 -1 l
h
f
Q
q
11 0 10 10 rc
10 11 m
22 11 l
22 -1 l
10 -1 l
h
f
Q
0 0 0 sc
q
22 0 10 10 rc
21 11 m
33 11 l
33 -1 l
21 -1 l
h
f
Q
1 1 1 sc
q
33 0 10 10 rc
32 11 m
44 11 l
44 -1 l
32 -1 l
h
f
0 0 0 sc
32 11 m
44 11 l
44 -1 l
32 -1 l
h
f
Q
0 0 0 sc
q
44 88 10 10 rc
43 99 m
55 99 l
55 87 l
43 87 l
h
f
Q
0.94509804 0.72549021 0 sc
q
55 88 10 10 rc
54 99 m
66 99 l
66 87 l
54 87 l
h
f
Q
0 0 0 sc
q
44 88 10 10 rc
43 99 m
55 99 l
55 87 l
43 87 l
h
f
Q
1 1 1 sc
q
0 88 10 10 rc
-1 99 m
11 99 l
11 87 l
-1 87 l
h
f
Q
q
11 88 10 10 rc
10 99 m
22 99 l
22 87 l
10 87 l
h
f
Q
0 0 0 sc
q
22 88 10 10 rc
21 99 m
33 99 l
33 87 l
21 87 l
h
f
Q
1 1 1 sc
q
33 88 10 10 rc
32 99 m
44 99 l
44 87 l
32 87 l
h
f
0 0 0 sc
32 99 m
44 99 l
44 87 l
32 87 l
h
f
Q
0 0 0 sc
q
44 99 10 10 rc
43 110 m
55 110 l
55 98 l
43 98 l
h
f
Q
q
55 99 10 10 rc
54 110 m
66 110 l
66 98 l
54 98 l
h
f
Q
1 1 1 sc
q
44 99 10 10 rc
43 110 m
55 110 l
55 98 l
43 98 l
h
f
Q
q
0 99 10 10 rc
-1 110 m
11 110 l
11 98 l
-1 98 l
h
f
Q
q
11 99 10 10 rc
10 110 m
22 110 l
22 98 l
10 98 l
h
f
Q
0 0 0 sc
q
22 99 10 10 rc
21 110 m
33 110 l
33 98 l
21 98 l
h
f
Q
1 1 1 sc
q
33 99 10 10 rc
32 110 m
44 110 l
44 98 l
32 98 l
h
f
0 0 0 sc
32 110 m
44 110 l
44 98 l
32 98 l
h
f
Q
0 0 0 sc
q
77 132 10 10 rc
88 143 m
76 143 l
76 131 l
88 131 l
h
f
Q
q
66 132 10 10 rc
77 143 m
65 143 l
65 131 l
77 131 l
h
f
Q
q
77 132 10 10 rc
88 143 m
76 143 l
76 131 l
88 131 l
h
f
Q
1 1 1 sc
q
121 132 10 10 rc
132 143 m
120 143 l
120 131 l
132 131 l
h
f
Q
q
110 132 10 10 rc
121 143 m
109 143 l
109 131 l
121 131 l
h
f
Q
q
99 132 10 10 rc
110 143 m
98 143 l
98 131 l
110 131 l
h
f
Q
q
88 132 10 10 rc
99 143 m
87 143 l
87 131 l
99 131 l
h
f
99 143 m
87 143 l
87 131 l
99 131 l
h
f
Q
0 0 0 sc
q
77 121 10 10 rc
88 132 m
76 132 l
76 120 l
88 120 l
h
f
Q
q
66 121 10 10 rc
77 132 m
65 132 l
65 120 l
77 120 l
h
f
Q
q
77 121 10 10 rc
88 132 m
76 132 l
76 120 l
88 120 l
h
f
Q
1 1 1 sc
q
121 121 10 10 rc
132 132 m
120 132 l
120 120 l
132 120 l
h
f
Q
q
110 121 10 10 rc
121 132 m
109 132 l
109 120 l
121 120 l
h
f
Q
q
99 121 10 10 rc
110 132 m
98 132 l
98 120 l
110 120 l
h
f
Q
q
88 121 10 10 rc
99 132 m
87 132 l
87 120 l
99 120 l
h
f
0 0 0 sc
99 132 m
87 132 l
87 120 l
99 120 l
h
f
Q
0 0 0 sc
q
77 110 10 10 rc
88 121 m
76 121 l
76 109 l
88 109 l
h
f
Q
q
66 110 10 10 rc
77 121 m
65 121 l
65 109 l
77 109 l
h
f
Q
q
77 110 10 10 rc
88 121 m
76 121 l
76 109 l
88 109 l
h
f
Q
1 1 1 sc
q
121 110 10 10 rc
132 121 m
120 121 l
120 109 l
132 109 l
h
f
Q
q
110 110 10 10 rc
121 121 m
109 121 l
109 109 l
121 109 l
h
f
Q
0 0 0 sc
q
99 110 10 10 rc
110 121 m
98 121 l
98 109 l
110 109 l
h
f
Q
1 1 1 sc
q
88 110 10 10 rc
99 121 m
87 121 l
87 109 l
99 109 l
h
f
0 0 0 sc
99 121 m
87 121 l
87 109 l
99 109 l
h
f
Q
0 0 0 sc
q
77 77 10 10 rc
88 88 m
76 88 l
76 76 l
88 76 l
h
f
Q
1 1 1 sc
q
66 77 10 10 rc
77 88 m
65 88 l
65 76 l
77 76 l
h
f
Q
0 0 0 sc
q
77 77 10 10 rc
88 88 m
76 88 l
76 76 l
88 76 l
h
f
Q
1 1 1 sc
q
121 77 10 10 rc
132 88 m
120 88 l
120 76 l
132 76 l
h
f
Q
0 0 0 sc
q
110 77 10 10 rc
121 88 m
109 88 l
109 76 l
121 76 l
h
f
Q
q
99 77 10 10 rc
110 88 m
98 88 l
98 76 l
110 76 l
h
f
Q
1 1 1 sc
q
88 77 10 10 rc
99 88 m
87 88 l
87 76 l
99 76 l
h
f
0 0 0 sc
99 88 m
87 88 l
87 76 l
99 76 l
h
f
Q
0 0 0 sc
q
77 66 10 10 rc
88 77 m
76 77 l
76 65 l
88 65 l
h
f
Q
1 1 1 sc
q
66 66 10 10 rc
77 77 m
65 77 l
65 65 l
77 65 l
h
f
Q
q
77 66 10 10 rc
88 77 m
76 77 l
76 65 l
88 65 l
h
f
Q
0 0 0 sc
q
121 66 10 10 rc
132 77 m
120 77 l
120 65 l
132 65 l
h
f
Q
q
110 66 10 10 rc
121 77 m
109 77 l
109 65 l
121 65 l
h
f
Q
q
99 66 10 10 rc
110 77 m
98 77 l
98 65 l
110 65 l
h
f
Q
1 1 1 sc
q
88 66 10 10 rc
99 77 m
87 77 l
87 65 l
99 65 l
h
f
0 0 0 sc
99 77 m
87 77 l
87 65 l
99 65 l
h
f
Q
0 0 0 sc
q
77 55 10 10 rc
88 66 m
76 66 l
76 54 l
88 54 l
h
f
Q
1 1 1 sc
q
66 55 10 10 rc
77 66 m
65 66 l
65 54 l
77 54 l
h
f
Q
q
77 55 10 10 rc
88 66 m
76 66 l
76 54 l
88 54 l
h
f
Q
0 0 0 sc
q
121 55 10 10 rc
132 66 m
120 66 l
120 54 l
132 54 l
h
f
Q
q
110 55 10 10 rc
121 66 m
109 66 l
109 54 l
121 54 l
h
f
Q
q
99 55 10 10 rc
110 66 m
98 66 l
98 54 l
110 54 l
h
f
Q
1 1 1 sc
q
88 55 10 10 rc
99 66 m
87 66 l
87 54 l
99 54 l
h
f
99 66 m
87 66 l
87 54 l
99 54 l
h
f
Q
0 0 0 sc
q
77 44 10 10 rc
88 55 m
76 55 l
76 43 l
88 43 l
h
f
Q
1 1 1 sc
q
66 44 10 10 rc
77 55 m
65 55 l
65 43 l
77 43 l
h
f
Q
q
77 44 10 10 rc
88 55 m
76 55 l
76 43 l
88 43 l
h
f
Q
0 0 0 sc
q
121 44 10 10 rc
132 55 m
120 55 l
120 43 l
132 43 l
h
f
Q
1 1 1 sc
q
110 44 10 10 rc
121 55 m
109 55 l
109 43 l
121 43 l
h
f
Q
0 0 0 sc
q
99 44 10 10 rc
110 55 m
98 55 l
98 43 l
110 43 l
h
f
Q
1 1 1 sc
q
88 44 10 10 rc
99 55 m
87 55 l
87 43 l
99 43 l
h
f
99 55 m
87 55 l
87 43 l
99 43 l
h
f
Q
0 0 0 sc
q
77 33 10 10 rc
88 44 m
76 44 l
76 32 l
88 32 l
h
f
Q
1 1 1 sc
q
66 33 10 10 rc
77 44 m
65 44 l
65 32 l
77 32 l
h
f
Q
q
77 33 10 10 rc
88 44 m
76 44 l
76 32 l
88 32 l
h
f
Q
q
121 33 10 10 rc
132 44 m
120 44 l
120 32 l
132 32 l
h
f
Q
q
110 33 10 10 rc
121 44 m
109 44 l
109 32 l
121 32 l
h
f
Q
0 0 0 sc
q
99 33 10 10 rc
110 44 m
98 44 l
98 32 l
110 32 l
h
f
Q
1 1 1 sc
q
88 33 10 10 rc
99 44 m
87 44 l
87 32 l
99 32 l
h
f
0 0 0 sc
99 44 m
87 44 l
87 32 l
99 32 l
h
f
Q
0 0 0 sc
q
77 22 10 10 rc
88 33 m
76 33 l
76 21 l
88 21 l
h
f
Q
q
66 22 10 10 rc
77 33 m
65 33 l
65 21 l
77 21 l
h
f
Q
q
77 22 10 10 rc
88 33 m
76 33 l
76 21 l
88 21 l
h
f
Q
1 1 1 sc
q
121 22 10 10 rc
132 33 m
120 33 l
120 21 l
132 21 l
h
f
Q
0 0 0 sc
q
110 22 10 10 rc
121 33 m
109 33 l
109 21 l
121 21 l
h
f
Q
0.94509804 0.72549021 0 sc
q
99 22 10 10 rc
110 33 m
98 33 l
98 21 l
110 21 l
h
f
Q
1 1 1 sc
q
88 22 10 10 rc
99 33 m
87 33 l
87 21 l
99 21 l
h
f
0.94509804 0.72549021 0 sc
99 33 m
87 33 l
87 21 l
99 21 l
h
f
Q
0 0 0 sc
q
77 11 10 10 rc
88 22 m
76 22 l
76 10 l
88 10 l
h
f
Q
q
66 11 10 10 rc
77 22 m
65 22 l
65 10 l
77 10 l
h
f
Q
q
77 11 10 10 rc
88 22 m
76 22 l
76 10 l
88 10 l
h
f
Q
1 1 1 sc
q
121 11 10 10 rc
132 22 m
120 22 l
120 10 l
132 10 l
h
f
Q
0 0 0 sc
q
110 11 10 10 rc
121 22 m
109 22 l
109 10 l
121 10 l
h
f
Q
0.94509804 0.72549021 0 sc
q
99 11 10 10 rc
110 22 m
98 22 l
98 10 l
110 10 l
h
f
Q
1 1 1 sc
q
88 11 10 10 rc
99 22 m
87 22 l
87 10 l
99 10 l
h
f
0.94509804 0.72549021 0 sc
99 22 m
87 22 l
87 10 l
99 10 l
h
f
Q
0 0 0 sc
q
77 0 10 10 rc
88 11 m
76 11 l
76 -1 l
88 -1 l
h
f
Q
1 1 1 sc
q
66 0 10 10 rc
77 11 m
65 11 l
65 -1 l
77 -1 l
h
f
Q
q
77 0 10 10 rc
88 11 m
76 11 l
76 -1 l
88 -1 l
h
f
Q
q
121 0 10 10 rc
132 11 m
120 11 l
120 -1 l
132 -1 l
h
f
Q
q
110 0 10 10 rc
121 11 m
109 11 l
109 -1 l
121 -1 l
h
f
Q
0 0 0 sc
q
99 0 10 10 rc
110 11 m
98 11 l
98 -1 l
110 -1 l
h
f
Q
1 1 1 sc
q
88 0 10 10 rc
99 11 m
87 11 l
87 -1 l
99 -1 l
h
f
0 0 0 sc
99 11 m
87 11 l
87 -1 l
99 -1 l
h
f
Q
0 0 0 sc
q
77 88 10 10 rc
88 99 m
76 99 l
76 87 l
88 87 l
h
f
Q
0.94509804 0.72549021 0 sc
q
66 88 10 10 rc
77 99 m
65 99 l
65 87 l
77 87 l
h
f
Q
0 0 0 sc
q
77 88 10 10 rc
88 99 m
76 99 l
76 87 l
88 87 l
h
f
Q
1 1 1 sc
q
121 88 10 10 rc
132 99 m
120 99 l
120 87 l
132 87 l
h
f
Q
q
110 88 10 10 rc
121 99 m
109 99 l
109 87 l
121 87 l
h
f
Q
0 0 0 sc
q
99 88 10 10 rc
110 99 m
98 99 l
98 87 l
110 87 l
h
f
Q
1 1 1 sc
q
88 88 10 10 rc
99 99 m
87 99 l
87 87 l
99 87 l
h
f
0 0 0 sc
99 99 m
87 99 l
87 87 l
99 87 l
h
f
Q
0 0 0 sc
q
77 99 10 10 rc
88 110 m
76 110 l
76 98 l
88 98 l
h
f
Q
q
66 99 10 10 rc
77 110 m
65 110 l
65 98 l
77 98 l
h
f
Q
1 1 1 sc
q
77 99 10 10 rc
88 110 m
76 110 l
76 98 l
88 98 l
h
f
Q
q
121 99 10 10 rc
132 110 m
120 110 l
120 98 l
132 98 l
h
f
Q
q
110 99 10 10 rc
121 110 m
109 110 l
109 98 l
121 98 l
h
f
Q
0 0 0 sc
q
99 99 10 10 rc
110 110 m
98 110 l
98 98 l
110 98 l
h
f
Q
1 1 1 sc
q
88 99 10 10 rc
99 110 m
87 110 l
87 98 l
99 98 l
h
f
0 0 0 sc
99 110 m
87 110 l
87 98 l
99 98 l
h
f
ep
end
%%Trailer
%%EOF
